name: Release llama_cpp_canister

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the release (e.g., v1.0.0)"
        required: true

jobs:
  check-cicd-mac-status:
    name: Check if cicd-mac succeeded
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # âœ… This ensures GitHub CLI can detect the repo

      - name: Set up GitHub CLI authentication
        run: echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Get the latest `cicd-mac.yml` run status
        run: |
          echo "Fetching the latest run of cicd-mac..."
          latest_run=$(gh run list --repo ${{ github.repository }} --workflow="cicd-mac.yml" --limit 1 --json conclusion --jq '.[0].conclusion')
          if [ "$latest_run" != "success" ]; then
            echo "The latest cicd-mac run was not successful. Exiting."
            exit 1
          fi
          echo "The latest cicd-mac run was successful."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Build and Release
    strategy:
      matrix:
        python-version: [3.11]
        os: [macos-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
      # https://github.com/marketplace/actions/setup-miniconda
      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}

      # -------------------------------------------------------------------
      # Checkout llama_cpp_canister & llama_cpp_onicai_fork as nested directory
      - name: checkout llama_cpp_canister
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: checkout llama_cpp_onicai_fork
        uses: actions/checkout@v4
        with:
          repository: onicai/llama_cpp_onicai_fork
          ref: onicai  # Specify the branch name here
          # ref: onicai-615212  # While working on the upgrade...
          path: src/llama_cpp_onicai_fork
          fetch-depth: 1 # Get just the last commit
          submodules: 'recursive'
      # -------------------------------------------------------------------

      - name: install
        shell: bash -l {0} # activates the default conda environment ('test')
        run: |
          echo "Installing tool chains & dependencies"
          pwd
          make summary
          make install-dfx
          make install-python
          make install-homebrew-mac
          make install-jp-mac

      - name: versions
        shell: bash -l {0}
        run: |
          echo "icpp --version: $(icpp --version)"
          echo "clang++ --version: $(clang++ --version)"
          echo "g++ --version: $(g++ --version)"
          #echo "wasm2wat version: $(wasm2wat --version)"
          echo "pip version     : $(pip --version)"
          echo "python version  : $(python --version)"
          echo "jp version      : $(jp --version)"
          #echo "rustc version   : $(rustc --version)"
          echo "dfx version    : $(dfx --version)"
          echo "Ensure conda works properly"
          conda info
          which pip
          which python
          which icpp

      - name: install-wasi-sdk
        shell: bash -l {0}
        run: |
          echo "Installing wasi-sdk"
          icpp install-wasi-sdk

      - name: install-rust
        shell: bash -l {0}
        run: |
          echo "Installing rust"
          icpp install-rust

      - name: build-info-cpp-wasm
        shell: bash -l {0}
        run: |
          make build-info-cpp-wasm

      - name: all-static
        shell: bash -l {0}
        run: |
          make all-static
      
      - name: build-wasm
        shell: bash -l {0}
        run: |
          icpp build-wasm

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/llama_cpp.wasm
            build/llama_cpp.did
          tag_name: ${{ github.event.inputs.tag }}
          release_name: "Release ${{ github.event.inputs.tag }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}